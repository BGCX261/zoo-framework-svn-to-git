/** * regPointX * regPointY *  * ... * @author Marcelo Duende *  * @version 1.0 *  * @usage  * import com.zoo.Aligner; * Aligner.add($target, { $vars }); *  * Aligner.add(resize_mc, { align:"TOP_LEFT" }); // alignment to top and left at same time. * or * Aligner.add(resize_mc, { x:10, y:300}); // alignment to x, y. *  * ---------------------------------------------- *  * @param  * $target = The object to be moved on stage; * $vars = Here, we can get both x, y or native statements like:  * 		TOP; *  	BOTTOM; *		RIGHT; *		LEFT; *		TOP_LEFT; *		TOP_CENTER; *		TOP_RIGHT; *		BOTTOM_LEFT; *		BOTTOM_CENTER; *		BOTTOM_RIGHT; *		LEFT_CENTER; *		RIGHT_CENTER; *		CENTER; *		CENTERX; *		CENTERY; * These statements must have "align:" before being written; * or * Aligner.add(resize_mc, { align:Aligner.BOTTOM_LEFT, tween:true, time:1, padding:20}); *  * Also, you can use tween events, a gift from Jack Doyle ( GreenSock ) for us. * Aligner.add(resize_mc, { align:"BOTTOM_LEFT", tween:true, time:1}); *  * Using padding, paddinX and paddinY you can set spaces between your object and limits of the stage; * Aligner.add(resize_mc, { align:"BOTTOM_LEFT", tween:true, time:1, padding:20}); * Aligner.add(resize_mc, { align:"LEFT", tween:true, time:1, paddingX:30}); * Aligner.add(resize_mc, { align:"TOP", tween:true, time:1, paddingY:40}); *  * */package com.zoo {	import com.greensock.TweenLite;	import com.zoo.alignerMethods.*;	import com.zoo.killAligner.SubKill;	import com.zoo.registrationPoint.RegistrationPoint;	import com.zoo.resizeMethods.Height;	import com.zoo.resizeMethods.Width;	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	public class Aligner extends CheckVersion	{		/* set version */		private const _version:Number = 1.0;				/* set alignment constants */		public static const TOP						: String = "TOP";		public static const BOTTOM					: String = "BOTTOM";		public static const RIGHT					: String = "RIGHT";		public static const LEFT					: String = "LEFT";		public static const TOP_LEFT				: String = "TOP_LEFT";		public static const TOP_CENTER				: String = "TOP_CENTER";		public static const TOP_RIGHT				: String = "TOP_RIGHT";		public static const BOTTOM_LEFT				: String = "BOTTOM_LEFT";		public static const BOTTOM_CENTER			: String = "BOTTOM_CENTER";		public static const BOTTOM_RIGHT			: String = "BOTTOM_RIGHT";		public static const LEFT_CENTER				: String = "LEFT_CENTER";		public static const RIGHT_CENTER			: String = "RIGHT_CENTER";		public static const CENTER					: String = "CENTER";		public static const CENTERX					: String = "CENTERX";		public static const CENTERY					: String = "CENTERY";				/* body variables */		private var _environment					: Stage;		private var _target							: DisplayObject;		private var saveVars						: Array = new Array();		private var _align							: int = -1;		private var _id								: int = -1;		private var _widthDifference				: int = -1;		private var _heightDifference				: int = -1;		private var _padding						: int = -1;		private var _paddingX						: int = -1;		private var _paddingY						: int = -1;		private var _tween							: int = -1;		private var _time							: int = -1;		private var _regPointX						: int = -1;		private var _regPointY						: int = -1;		private var paddingDifference				: Number = new Number();		private var paddingDifferenceX				: Number = new	Number();		private var paddingDifferenceY				: Number = new Number();		private var regPointX						: Number = new Number();		private var regPointY						: Number = new Number();		private var setStageHeight					: Boolean = false;		private var setStageWidth					: Boolean = false;		private var savedIds						: Array = new Array();								private static var allObjectsShippedToDeath : Array = new Array();		private static var allEventsShippedToDeath  : Array = new Array();		private static var environmentStatic 		: Object;				public static var subKill					: SubKill = new SubKill();				/**		 * 		 * @param	$target - MovieClip to align		 * @param	$vars - Parameters to set		 */				public function Aligner($target:DisplayObject, $vars:Object):void		{						super();			if(_version == version)			{				_target = $target;																_environment = Stage(DisplayObject(_target.parent).stage);				environmentStatic = _environment;								if(_target == null)				{					trace("You can not use the Aligner features without an object, please set your target reference. Aligner.add($target, { $vars });");				} else 				{					for (var a:* in $vars) {						var _tmp:Object = new Object();						_tmp["property"] = a;						_tmp["value"] = $vars[a];						saveVars.push(						_tmp["property"], _tmp["value"]);												if (_tmp["property"] == "align" || 						_tmp["property"] == "tween" || 						_tmp["property"] == "time" || 						_tmp["property"] == "padding" || 						_tmp["property"] == "paddingX" || 						_tmp["property"] == "paddingY" || 						_tmp["property"] == "height" || 						_tmp["property"] == "width" ||						_tmp["property"] == "regPointX" ||						_tmp["property"] == "regPointY" ||						_tmp["property"] == "id"						)						{							switch (_tmp["property"])							{								case "align":									_align = saveVars.indexOf(a);									break;								case "tween":									_tween = saveVars.indexOf(a);									break;								case "time":									_time = saveVars.indexOf(a);									break;								case "padding":									_padding = saveVars.indexOf(a);									break;								case "paddingX":									_paddingX = saveVars.indexOf(a);									break;								case "paddingY":									_paddingY = saveVars.indexOf(a);									break;								case "height":									_heightDifference = saveVars.indexOf(a);									break;								case "width":									_widthDifference = saveVars.indexOf(a);									break;								case "regPointX":									_regPointX = saveVars.indexOf(a);									break;								case "regPointY":									_regPointY = saveVars.indexOf(a);									break;								case "id"://warehousing ids									_id = saveVars.indexOf(a);									savedIds.push(saveVars[_id+1]);									break;							}						}					}									checkKillAll = false;					if(allEventsShippedToDeath != [])					{						allEventsShippedToDeath = [];					}					allObjectsShippedToDeath.push(_target);					allEventsShippedToDeath.push(_environment);															_environment.addEventListener(Event.RESIZE, SetPosition);					SetPosition();				}			} else {				trace("Your Zoo Framework is outdating, please, visit http://code.google.com/p/zoo-framework/ and download the new version");			}		}				/**		 * 		 * @return The current class		 */		public static function add($target:DisplayObject, $vars:Object):Aligner		{			return new Aligner($target, $vars);		}				/**		 * 		 * @return The killAll Class		 */		public static function killAll():void		{				// However, non-static elements are inherited.			subKill.inheritedFunction();			subKill._checkKillAllPrivate = true;		}								/**		 * 		 * @eventType Width and Height properties		 */				public function setStageSize():void		{			if(setStageWidth)			{				_widthDifference = _environment.stageWidth;			} 			Width.init(_target, _widthDifference);			if(setStageHeight)			{				_heightDifference = _environment.stageHeight;			}			Height.init(_target, _heightDifference);		}				/**		 * 		 * @param	event to set the position		 */				private var checkKillAll:Boolean = false;		private var checkSetPositionTimes:int = 0;		public function SetPosition(event:Event = null):void		{			if(subKill._checkKillAll){								if(subKill._checkKillAllPrivate == true)				{					for(var c:int = 0; c<int(allObjectsShippedToDeath.length); c++)					{						TweenLite.killTweensOf(allObjectsShippedToDeath[c]);						allEventsShippedToDeath[c].removeEventListener(Event.RESIZE, SetPosition);					}					subKill.removeFunction();					subKill._checkKillAllPrivate = false;					if(checkSetPositionTimes <= int(allObjectsShippedToDeath.length+1))					{						subKill._checkKillAllPrivate = false;						checkSetPositionTimes++;						SetPosition();					}				}else {					subKill._checkKillAllPrivate = false;					for(var d:int = 0; d<int(allEventsShippedToDeath.length); d++)					{						TweenLite.killTweensOf(allObjectsShippedToDeath[d]);						allEventsShippedToDeath[d].addEventListener(Event.RESIZE, SetPosition);					}				}			}						_environment.scaleMode = StageScaleMode.NO_SCALE;			_environment.align = StageAlign.TOP_LEFT;									// REGISTRATION POINT						regPointX = saveVars[_regPointX + 1];			regPointY = saveVars[_regPointY + 1];			if(regPointX.toString() == "NaN")			{				regPointX = 0;			}			if(regPointY.toString() == "NaN")			{				regPointY = 0;			}			if(_target.toString() != "[object TextField]" && _target.toString() != "[object Bitmap]")			{				RegistrationPoint.setRegPoint(_target, regPointX, regPointY);			}									// PADDING			if (saveVars[_padding + 1] > 0 || saveVars[_padding + 1] < -1)			{				paddingDifference = saveVars[_padding + 1];			} 			if (saveVars[_paddingX+1] > 0 || int(saveVars[_paddingY+1]) > 0 || saveVars[_paddingX+1] < -1 || int(saveVars[_paddingY+1]) < -1)			{				paddingDifferenceX = saveVars[_paddingX + 1];				paddingDifferenceY = saveVars[_paddingY + 1];			}												// RESIZING			if (saveVars[_widthDifference + 1] > 0)			{				_widthDifference = saveVars[_widthDifference + 1];				if(_widthDifference == _environment.stageWidth)				{					setStageWidth = true;				}			}			if (saveVars[_heightDifference + 1] > 0 )			{				_heightDifference = saveVars[_heightDifference + 1];				if(_heightDifference == _environment.stageHeight)				{					setStageHeight = true;				}			}			setStageSize();						// ALIGNING			switch (saveVars[_align+1])			{				case "TOP":					// Accesing Top class in com.zoo.alignerMethods.Top					Top.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceY, _paddingY);					break;				case "RIGHT":					// Accesing Top class in com.zoo.alignerMethods.Right					Right.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceX, _environment);				break;				case "RIGHT_CENTER":					// Accesing RightCenter class in com.zoo.alignerMethods.RightCenter					RightCenter.init(saveVars, _tween, _time, _target, paddingDifference, _environment);				break;				case "BOTTOM":					// Accesing Bottom class in com.zoo.alignerMethods.Bottom					Bottom.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceY, _environment);				break;				case "LEFT":					// Accesing Left class in com.zoo.alignerMethods.Left					Left.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceX);				break;				case "LEFT_CENTER":					// Accesing Left class in com.zoo.alignerMethods.LeftCenter					LeftCenter.init(saveVars, _tween, _time, _target, paddingDifference, _environment);				break;				case "TOP_LEFT":					// Accesing TopLeft class in com.zoo.alignerMethods.TopLeft					TopLeft.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceX, paddingDifferenceY);				break;				case "TOP_CENTER":					// Accesing TopCenter class in com.zoo.alignerMethods.TopCenter					TopCenter.init(saveVars, _tween, _time, _target, paddingDifference, _environment);				break;				case "TOP_RIGHT":					// Accesing TopRight class in com.zoo.alignerMethods.TopRight					TopRight.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceY, paddingDifferenceX, _environment);				break;				case "BOTTOM_RIGHT":					// Accesing BottomRight class in com.zoo.alignerMethods.BottomRight					BottomRight.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceY, paddingDifferenceX, _environment);				break;				case "BOTTOM_LEFT":					// Accesing BottomLeft class in com.zoo.alignerMethods.BottomLeft					BottomLeft.init(saveVars, _tween, _time, _target, paddingDifference, paddingDifferenceX, paddingDifferenceY, _environment);				break;				case "BOTTOM_CENTER":					// Accesing BottomCenter class in com.zoo.alignerMethods.BottomCenter					BottomCenter.init(saveVars, _tween, _time, _target, paddingDifference, _environment);				break;				case "CENTER":					// Accesing Center class in com.zoo.alignerMethods.Center					Center.init(saveVars, _tween, _time, _target, _environment);				break;				case "CENTERX":					// Accesing CenterX class in com.zoo.alignerMethods.CenterX					CenterX.init(saveVars, _tween, _time, _target, _environment);				break;				case "CENTERY":					// Accesing CenterY class in com.zoo.alignerMethods.CenterY					CenterY.init(saveVars, _tween, _time, _target, _environment);				break;				default:					trace("Probably you forgot to put your 'align' parameters, take a look in documentation at http://code.google.com/p/zoo-framework/. Thank you.");				break;			} 		}	}}